# FILE: k8s/agent-chassis.yaml (Updated)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-chassis
  namespace: ai-persona-system
  labels:
    app: agent-chassis
spec:
  replicas: 5
  selector:
    matchLabels:
      app: agent-chassis
  template:
    metadata:
      labels:
        app: agent-chassis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
        # Wait for Kafka
        - name: wait-for-kafka
          image: confluentinc/cp-kafka:7.5.0
          command:
            - sh
            - -c
            - |
              echo "Waiting for Kafka..."
              until kafka-topics --bootstrap-server kafka-0.kafka-headless:9092 --list >/dev/null 2>&1; do
                echo "Kafka not ready, waiting..."
                sleep 5
              done
              echo "Kafka is ready!"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"

        # Wait for PostgreSQL clients database
        - name: wait-for-postgres-clients
          image: postgres:16-alpine
          env:
            - name: CLIENTS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: clients-db-password
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL clients database..."
              export PGPASSWORD="$CLIENTS_DB_PASSWORD"
              until pg_isready -h postgres-clients -p 5432; do
                echo "PostgreSQL not ready, waiting..."
                sleep 2
              done
              
              # Wait for agent_definitions table
              max_attempts=30
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                if psql -h postgres-clients -U clients_user -d clients_db -c "\d agent_definitions" >/dev/null 2>&1; then
                  echo "PostgreSQL clients database is ready!"
                  exit 0
                fi
                echo "Attempt $attempt/$max_attempts - database schema not ready..."
                sleep 10
                ((attempt++))
              done
              echo "Database schema not ready in time"
              exit 1
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

        # Wait for required Kafka topics
        - name: wait-for-topics
          image: confluentinc/cp-kafka:7.5.0
          command:
            - sh
            - -c
            - |
              echo "Waiting for required Kafka topics..."
              required_topics="system.agent.generic.process system.tasks.copywriter system.tasks.researcher"
              
              for topic in $required_topics; do
                echo "Checking for topic: $topic"
                max_attempts=20
                attempt=1
                while [ $attempt -le $max_attempts ]; do
                  if kafka-topics --bootstrap-server kafka-0.kafka-headless:9092 --list | grep -q "^$topic$"; then
                    echo "Topic $topic exists!"
                    break
                  fi
                  if [ $attempt -eq $max_attempts ]; then
                    echo "Topic $topic not found after $max_attempts attempts"
                    exit 1
                  fi
                  echo "Attempt $attempt/$max_attempts - topic $topic not found..."
                  sleep 5
                  ((attempt++))
                done
              done
              echo "All required topics exist!"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"

      containers:
        - name: agent-chassis
          image: ai-persona-system/agent-chassis:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9090
              name: metrics
          env:
            - name: SERVICE_NAME
              value: "agent-chassis"
            - name: SERVICE_VERSION
              value: "1.0.0"
            - name: SERVICE_ENVIRONMENT
              value: "production"
            - name: LOGGING_LEVEL
              value: "info"
            - name: AGENT_TYPE
              value: "generic"
            - name: KAFKA_CONSUMER_GROUP
              value: "agent-chassis-group"
            - name: CLIENTS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: clients-db-password
            - name: TEMPLATES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: templates-db-password
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: secret-key
          envFrom:
            - configMapRef:
                name: common-config
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /health
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 9090
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agent-chassis-hpa
  namespace: ai-persona-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agent-chassis
  minReplicas: 5
  maxReplicas: 50
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60