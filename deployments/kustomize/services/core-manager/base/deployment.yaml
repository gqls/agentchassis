# FILE: k8s/core-manager.yaml (Updated)
apiVersion: v1
kind: Service
metadata:
  name: core-manager
  namespace: ai-persona-system
  labels:
    app: core-manager
spec:
  ports:
    - port: 8088
      targetPort: 8088
      name: http
    - port: 9090
      targetPort: 9090
      name: metrics
  selector:
    app: core-manager
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-manager
  namespace: ai-persona-system
  labels:
    app: core-manager
spec:
  replicas: 3
  selector:
    matchLabels:
      app: core-manager
  template:
    metadata:
      labels:
        app: core-manager
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
        # Wait for PostgreSQL clients database
        - name: wait-for-postgres-clients
          image: postgres:16-alpine
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL clients database..."
              until pg_isready -h postgres-clients -p 5432; do
                echo "PostgreSQL clients not ready, waiting..."
                sleep 2
              done
              echo "PostgreSQL clients is ready!"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

        # Wait for PostgreSQL templates database
        - name: wait-for-postgres-templates
          image: postgres:16-alpine
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL templates database..."
              until pg_isready -h postgres-templates -p 5432; do
                echo "PostgreSQL templates not ready, waiting..."
                sleep 2
              done
              echo "PostgreSQL templates is ready!"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

        # Wait for database migrations
        - name: wait-for-migrations
          image: postgres:16-alpine
          env:
            - name: CLIENTS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: clients-db-password
            - name: TEMPLATES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: templates-db-password
          command:
            - sh
            - -c
            - |
              echo "Waiting for database migrations to complete..."
              export PGPASSWORD="$TEMPLATES_DB_PASSWORD"
              max_attempts=30
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                if psql -h postgres-templates -U templates_user -d templates_db -c "\d persona_templates" >/dev/null 2>&1; then
                  echo "Templates database ready!"
                  break
                fi
                echo "Attempt $attempt/$max_attempts - templates database not ready..."
                sleep 10
                ((attempt++))
              done
              
              export PGPASSWORD="$CLIENTS_DB_PASSWORD"
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                if psql -h postgres-clients -U clients_user -d clients_db -c "\d orchestrator_state" >/dev/null 2>&1; then
                  echo "Clients database ready!"
                  exit 0
                fi
                echo "Attempt $attempt/$max_attempts - clients database not ready..."
                sleep 10
                ((attempt++))
              done
              echo "Database migrations did not complete in time"
              exit 1
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

        # Wait for MinIO
        - name: wait-for-minio
          image: curlimages/curl:latest
          command:
            - sh
            - -c
            - |
              echo "Waiting for MinIO..."
              until curl -f http://minio:9000/minio/health/live >/dev/null 2>&1; do
                echo "MinIO not ready, waiting..."
                sleep 5
              done
              echo "MinIO is ready!"
          resources:
            requests:
              memory: "32Mi"
              cpu: "50m"
            limits:
              memory: "64Mi"
              cpu: "100m"

      containers:
        - name: core-manager
          image: ai-persona-system/core-manager:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8088
              name: http
            - containerPort: 9090
              name: metrics
          env:
            - name: SERVICE_NAME
              value: "core-manager"
            - name: SERVICE_VERSION
              value: "1.0.0"
            - name: SERVICE_ENVIRONMENT
              value: "production"
            - name: SERVER_PORT
              value: "8088"
            - name: LOGGING_LEVEL
              value: "info"
            - name: CLIENTS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: clients-db-password
            - name: TEMPLATES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: templates-db-password
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: secret-key
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: jwt-secret
          envFrom:
            - configMapRef:
                name: common-config
          resources:
            requests:
              memory: "768Mi"
              cpu: "500m"
            limits:
              memory: "1.5Gi"
              cpu: "1500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8088
            initialDelaySeconds: 45
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8088
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL