// FILE: cmd/core-manager/main.go
package main

import (
	"context"
	"errors"
	"flag"
	"fmt"
	"github.com/gqls/agentchassis/platform/kafka"
	"github.com/jackc/pgx/v5/pgxpool"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gqls/agentchassis/internal/core-manager/api"

	// Platform packages
	"github.com/gqls/agentchassis/platform/config"
	"github.com/gqls/agentchassis/platform/database"
	"github.com/gqls/agentchassis/platform/logger"

	"go.uber.org/zap"

	// Import swagger docs (generated by swag init)
	_ "github.com/gqls/agentchassis/cmd/core-manager/docs"
)

// @title Core Manager API
// @version 1.0.0
// @description Central orchestration service for the Personae System. Manages persona templates, instances, and coordinates agent workflows.

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@personae.io

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8081
// @BasePath /api/v1

// @securityDefinitions.apikey Bearer
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
	// --- Step 1: Load Configuration using the Platform Library ---
	configPath := flag.String("config", "configs/core-manager.yaml", "Path to config file")
	flag.Parse()

	// Use the standardized platform loader
	cfg, err := config.Load(*configPath)
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// --- Step 2: Initialize Logger using the Platform Library ---
	appLogger, err := logger.New(cfg.Logging.Level)
	if err != nil {
		log.Fatalf("Failed to initialize logger: %v", err)
	}
	defer appLogger.Sync()

	appLogger.Info("Core Manager Service starting",
		zap.String("service_name", cfg.ServiceInfo.Name),
		zap.String("version", cfg.ServiceInfo.Version),
		zap.String("environment", cfg.ServiceInfo.Environment),
		zap.String("log_level", cfg.Logging.Level),
	)

	// Create a main context that can be cancelled for graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// --- Step 3: Initialize Database Connections using the Platform Library ---
	// 3a. Create connection pool for the Templates Database
	templatesPool, err := database.NewPostgresConnection(ctx, cfg.Infrastructure.TemplatesDatabase, appLogger)
	if err != nil {
		appLogger.Fatal("Failed to initialize templates database connection", zap.Error(err))
	}
	defer templatesPool.Close()

	// 3b. Create connection pool for the Clients Database
	clientsPool, err := database.NewPostgresConnection(ctx, cfg.Infrastructure.ClientsDatabase, appLogger)
	if err != nil {
		appLogger.Fatal("Failed to initialize clients database connection", zap.Error(err))
	}
	defer clientsPool.Close()

	// --- Step 4a: Initialize Kafka Topics ---
	// This ensures all system topics and agent topics exist
	if err := initializeKafkaTopics(ctx, cfg, appLogger, clientsPool); err != nil {
		appLogger.Warn("Topic initialization encountered errors", zap.Error(err))
		// Don't fail startup - topics can be created on-demand
	}

	// --- Step 4b: Initialize and Start the API Server ---
	apiServer, err := api.NewServer(ctx, cfg, appLogger, templatesPool, clientsPool)
	if err != nil {
		appLogger.Fatal("Failed to initialize API server", zap.Error(err))
	}

	// Run the server in a goroutine so it doesn't block
	go func() {
		appLogger.Info("Starting HTTP server", zap.String("address", apiServer.Address()))
		if err := apiServer.Start(); err != nil && !errors.Is(err, http.ErrServerClosed) {
			appLogger.Error("API server failed", zap.Error(err))
			cancel() // Trigger shutdown on server error
		}
	}()

	// --- Step 5: Handle Graceful Shutdown ---
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)
	receivedSignal := <-sigCh
	appLogger.Info("Shutdown signal received", zap.String("signal", receivedSignal.String()))

	// Graceful shutdown with timeout
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer shutdownCancel()

	if err := apiServer.Shutdown(shutdownCtx); err != nil {
		appLogger.Error("Error during graceful shutdown", zap.Error(err))
	}

	appLogger.Info("Core Manager Service stopped")
}

// initializeKafkaTopics creates system and agent topics
func initializeKafkaTopics(ctx context.Context, cfg *config.ServiceConfig, logger *zap.Logger, clientsDB *pgxpool.Pool) error {
	topicManager := kafka.NewTopicManager(cfg.Infrastructure.KafkaBrokers, logger)

	// Create a context with timeout for topic operations
	topicCtx, cancel := context.WithTimeout(ctx, 2*time.Minute)
	defer cancel()

	// Step 1: Create system topics
	logger.Info("Creating system Kafka topics...")
	if err := topicManager.CreateSystemTopics(topicCtx); err != nil {
		logger.Error("Failed to create system topics", zap.Error(err))
		// Continue anyway - some topics might have been created
	}

	// Step 2: Create topics for existing agent definitions
	logger.Info("Creating agent-specific Kafka topics...")

	// Query all active agent definitions from the shared table
	query := `
		SELECT DISTINCT type 
		FROM agent_definitions 
		WHERE is_active = true AND deleted_at IS NULL
		ORDER BY type
	`

	rows, err := clientsDB.Query(topicCtx, query)
	if err != nil {
		logger.Error("Failed to query agent definitions", zap.Error(err))
		return nil // Don't fail startup
	}
	defer rows.Close()

	agentCount := 0
	failureCount := 0

	for rows.Next() {
		var agentType string
		if err := rows.Scan(&agentType); err != nil {
			logger.Error("Failed to scan agent type", zap.Error(err))
			continue
		}

		agentCount++
		logger.Info("Creating topics for agent", zap.String("agent_type", agentType))

		if err := topicManager.CreateAgentTopics(topicCtx, agentType); err != nil {
			logger.Error("Failed to create topics for agent",
				zap.String("agent_type", agentType),
				zap.Error(err))
			failureCount++
			// Continue with other agents
		}
	}

	logger.Info("Kafka topic initialization completed",
		zap.Int("agent_types_processed", agentCount),
		zap.Int("failures", failureCount))

	// Step 3: List all topics for verification (optional)
	if logger.Core().Enabled(zap.DebugLevel) {
		topics, err := topicManager.ListTopics(topicCtx)
		if err == nil {
			logger.Debug("Current Kafka topics", zap.Strings("topics", topics))
		}
	}

	if failureCount > 0 {
		return fmt.Errorf("failed to create topics for %d agents", failureCount)
	}

	return nil
}
